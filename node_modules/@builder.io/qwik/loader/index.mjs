const QWIK_LOADER = "!function(){const t=(t,e)=>{var n;const o=t.ownerDocument,r=t.closest(\"[q\\\\:container]\"),s=new URL(null!=(n=null==r?void 0:r.getAttribute(\"q:base\"))?n:o.baseURI,o.baseURI);return new URL(e,s)},e=t=>{throw Error(\"QWIK: \"+t)};((n,o)=>{const r=\"__q_context__\",s=[\"on:\",\"on-window:\",\"on-document:\"],a=async(t,e,o)=>{e=e.replace(/([A-Z])/g,(t=>\"-\"+t.toLowerCase())),n.querySelectorAll(\"[on\"+t+\"\\\\:\"+e+\"]\").forEach((t=>c(t,e,o)))},c=async(o,a,c)=>{for(const u of s){const s=o.getAttribute(u+a);if(s){o.hasAttribute(\"preventdefault:\"+a)&&c.preventDefault();for(const a of s.split(\"\\n\")){const s=t(o,a);if(s){const t=i(s),a=(window[s.pathname]||await import(\n/* @vite-ignore */\n(s+\"\").split(\"#\")[0]))[t]||e(s+\" does not export \"+t),u=n[r];try{n[r]=[o,c,s],a(c,o,s)}finally{n[r]=u,l=t,o.dispatchEvent(new CustomEvent(\"qSymbol\",{detail:{name:l},bubbles:!0,composed:!0}))}}}}}var l},i=t=>t.hash.replace(/^#?([^?[|]*).*$/,\"$1\")||\"default\",l=async(t,e)=>{if((e=t.target)==n)setTimeout((()=>a(\"-document\",t.type,t)));else for(;e&&e.getAttribute;)c(e,t.type,t),e=t.bubbles?e.parentElement:null},u=t=>n.addEventListener(t,l,{capture:!0}),d=t=>{t=n.readyState,o||\"interactive\"!=t&&\"complete\"!=t||(o=1,a(\"\",\"q-init\",new CustomEvent(\"qInit\")))};{const t=n.querySelector(\"script[events]\");if(t)(t.getAttribute(\"events\")||\"\").split(/[\\s,;]+/).forEach(u);else for(const t in n)0==t.indexOf(\"on\")&&u(t.substring(2))}n.addEventListener(\"readystatechange\",d),d()})(document)}();";
const QWIK_LOADER_DEBUG = "!function() {\n    /**\n * @license\n * Copyright Builder.io, Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/BuilderIO/qwik/blob/main/LICENSE\n */\n    const qrlResolver = (element, eventUrl) => {\n        var _a;\n        const doc = element.ownerDocument;\n        const containerEl = element.closest(\"[q\\\\:container]\");\n        const base = new URL(null != (_a = null == containerEl ? void 0 : containerEl.getAttribute(\"q:base\")) ? _a : doc.baseURI, doc.baseURI);\n        return new URL(eventUrl, base);\n    };\n    const error = msg => {\n        throw new Error(\"QWIK: \" + msg);\n    };\n    ((doc, hasInitialized) => {\n        const ON_PREFIXES = [ \"on:\", \"on-window:\", \"on-document:\" ];\n        const broadcast = async (infix, type, event) => {\n            type = type.replace(/([A-Z])/g, (a => \"-\" + a.toLowerCase()));\n            doc.querySelectorAll(\"[on\" + infix + \"\\\\:\" + type + \"]\").forEach((target => dispatch(target, type, event)));\n        };\n        const symbolUsed = (el, name) => el.dispatchEvent(new CustomEvent(\"qSymbol\", {\n            detail: {\n                name: name\n            },\n            bubbles: !0,\n            composed: !0\n        }));\n        const dispatch = async (element, eventName, ev) => {\n            for (const on of ON_PREFIXES) {\n                const attrValue = element.getAttribute(on + eventName);\n                if (!attrValue) {\n                    continue;\n                }\n                element.hasAttribute(\"preventdefault:\" + eventName) && ev.preventDefault();\n                for (const qrl of attrValue.split(\"\\n\")) {\n                    const url = qrlResolver(element, qrl);\n                    if (url) {\n                        const symbolName = getSymbolName(url);\n                        const handler = (window[url.pathname] || await import(\n                        /* @vite-ignore */\n                        String(url).split(\"#\")[0]))[symbolName] || error(url + \" does not export \" + symbolName);\n                        const previousCtx = doc.__q_context__;\n                        try {\n                            doc.__q_context__ = [ element, ev, url ];\n                            handler(ev, element, url);\n                        } finally {\n                            doc.__q_context__ = previousCtx;\n                            symbolUsed(element, symbolName);\n                        }\n                    }\n                }\n            }\n        };\n        const getSymbolName = url => url.hash.replace(/^#?([^?[|]*).*$/, \"$1\") || \"default\";\n        const processEvent = async (ev, element) => {\n            if ((element = ev.target) == doc) {\n                setTimeout((() => broadcast(\"-document\", ev.type, ev)));\n            } else {\n                while (element && element.getAttribute) {\n                    dispatch(element, ev.type, ev);\n                    element = ev.bubbles ? element.parentElement : null;\n                }\n            }\n        };\n        const addEventListener = eventName => doc.addEventListener(eventName, processEvent, {\n            capture: !0\n        });\n        const processReadyStateChange = readyState => {\n            readyState = doc.readyState;\n            if (!hasInitialized && (\"interactive\" == readyState || \"complete\" == readyState)) {\n                hasInitialized = 1;\n                broadcast(\"\", \"q-init\", new CustomEvent(\"qInit\"));\n            }\n        };\n        {\n            const scriptTag = doc.querySelector(\"script[events]\");\n            if (scriptTag) {\n                (scriptTag.getAttribute(\"events\") || \"\").split(/[\\s,;]+/).forEach(addEventListener);\n            } else {\n                for (const key in doc) {\n                    if (0 == key.indexOf(\"on\")) {\n                        addEventListener(key.substring(2));\n                    }\n                }\n            }\n        }\n        doc.addEventListener(\"readystatechange\", processReadyStateChange);\n        processReadyStateChange();\n    })(document);\n}();";
export { QWIK_LOADER, QWIK_LOADER_DEBUG };
